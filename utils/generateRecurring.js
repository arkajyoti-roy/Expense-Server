const RecurringTransaction = require("../models/RecurringTransaction");
const Transaction = require("../models/transaction");

const generateRecurring = async () => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // normalize time
    const todayWeekday = today.toLocaleDateString("en-US", { weekday: "long" });
    const todayDateOnly = today.toDateString();
    const dayOfMonth = today.getDate();
    const monthKey = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, "0")}`;

    const rules = await RecurringTransaction.find();

    for (const rule of rules) {
      const {
        frequency,
        startsOn,
        weeklyDay,
        lastGenerated,
        userId,
        title,
        amount,
        type
      } = rule;

      if (!startsOn || isNaN(new Date(startsOn))) continue;

      const startDate = new Date(startsOn);
      startDate.setHours(0, 0, 0, 0);
      const startDatePassed = startDate <= today;
      const alreadyGeneratedToday = lastGenerated &&
        new Date(lastGenerated).toDateString() === todayDateOnly;

      let shouldGenerate = false;

      if (
        frequency === "weekly" &&
        startDatePassed &&
        !alreadyGeneratedToday &&
        (
          // First deduction: exactly on startsOn
          today.toDateString() === startDate.toDateString() ||
          // Subsequent deductions: every matching weekday after startsOn
          (today > startDate && todayWeekday === weeklyDay)
        )
      ) {
        shouldGenerate = true;
      }

      if (
        frequency === "monthly" &&
        startDatePassed &&
        !alreadyGeneratedToday &&
        startDate.getDate() === dayOfMonth
      ) {
        shouldGenerate = true;
      }

      if (shouldGenerate) {
        await Transaction.create({
          userId,
          title,
          amount,
          type,
          description: "Auto-posted from recurring rule",
          date: today,
          month: monthKey,
          isAutoGenerated: true
        });

        rule.lastGenerated = today;
        await rule.save();
      }
    }

    console.log(`✅ Recurring transactions processed for ${todayDateOnly}`);
  } catch (err) {
    console.error("❌ Failed to generate recurring transactions:", err.message);
  }
};

module.exports = generateRecurring;
